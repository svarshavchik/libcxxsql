<!--

Copyright 2013 Double Precision, Inc.
See COPYING for distribution information.

-->

<section id="INSTALL">
  <title>Installation, and requirements</title>

  <informaltable class="externallinks">
    <thead cols="1">
      <tr>
	<th>
	  <simpara>Links</simpara>
	</th>
      </tr>
    </thead>

    <tbody>
      <tr>
	<td>
	  <simpara>
	    <ulink url="https://releases.pagure.org/LibCXXSQL/">Download</ulink>
	  </simpara>

	  <!--
	  <simpara>
	    <ulink url="https://lists.libcxx.org/mailman/listinfo/libcxx-users_lists.libcxx.org">Mailing list</ulink>
	  </simpara>
	  -->

	  <simpara>
	    <ulink url="https://pagure.io/LibCXXSQL.git">Pagure</ulink> or
	    <ulink url="https://github.com/svarshavchik/libcxxsql.git">GitHUB</ulink>
	    <acronym>GIT</acronym>.
	  </simpara>

	  <simpara>
	    <ulink url="http://www.courier-mta.org/KEYS.bin">PGP key</ulink>
	  </simpara>
	</td>
      </tr>
    </tbody>
  </informaltable>

  <para>
    <ulink url="../INSTALL.html">Install &libcxx; first</ulink> before
    installing the &app;.
  </para>

  <para>
    &app; should be converted into an installable package instead of building
    and installing &app; directly. The source tarball
    contains build scripts for Fedora and Ubuntu (most likely works on Debian
    too, but untested.
  </para>

  <para>
    The installable packages get created the same way &libcxx;'s packages
    get created.
    Running
    <quote><command>rpmbuild -ta libcxxsql-<replaceable>version</replaceable>.tar.bz2</command></quote>
    on Fedora
    creates the following packages:
  </para>

  <itemizedlist>
    <listitem>
      <para>The main binary rpm package, with runtime libraries.</para>
    </listitem>
    <listitem>
      <para>
	The <quote>gmp</quote> subpackage, containing the additional
	library <link linkend="gmp">for interacing with the gmp
	  library</link>.
      </para>
    </listitem>
    <listitem>
      <para>
	The <quote>devel</quote> subpackage, containing header files and
	other supporting files used for developing applications that use the
	&app;.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    To build a DEB package:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	Create an empty directory and copy/move the tarball into it:
      </para>
      <blockquote>
	<informalexample>
	  <programlisting>
$ mkdir tmp
$ mv libcxxsql-VERSION.tar.bz2 tmp
$ cd tmp</programlisting>
	</informalexample>
      </blockquote>
      <para>Unpack the tarball and cd into the unpacked subdirectory:</para>
      <blockquote>
	<informalexample>
	  <programlisting>
$ tar xvf libcxxsql-VERSION.tar.bz2
$ cd libcxxsql-VERSION</programlisting>
	</informalexample>
      </blockquote>
    </listitem>
    <listitem>
      <para>
	Run the <command>debuild</command> script in the current directory,
	which is a wrapper for the system
	<command>debuild</command> script,
	and forwards its parameters to it:
      </para>
      <blockquote>
	<informalexample>
	  <programlisting>$ ./debuild -us -uc</programlisting>
	</informalexample>
      </blockquote>
    </listitem>
  </itemizedlist>

  <note>
    <para>
      The above steps must be followed strictly. The
      <command>debuild</command> script expects the
      distributed tarball in its parent
      directory.
    </para>
  </note>

  <para>
    This eventually produces a <filename>deb</filename> subdirectory with
    .deb packages that can be
    installed with "dpkg -i".
  </para>

  <note>
    <para>
      The above steps must be followed strictly. The
      <command>debuild</command> script expects the
      distributed tarball in its parent
      directory.
    </para>
  </note>

  <note>
    <para>
      Building the &app; results in an implicit dependency on the underlying
      version of the &libcxx;, and the resulting rpm packages carry both
      the &app; and the &libcxx; version numbers on them.
    </para>
  </note>

  <para>
    Use the following documentation as a guide for preparing an
    installable the &app; package on platforms other than Fedora.
  </para>

  <simplesect>
    <title>Requirements and prerequisites</title>

    <itemizedlist>
      <listitem>
	<para>
	  <ulink url="../INSTALL.html">Install &libcxx; first</ulink> before
	  installing the &app;. All &libcxx;'s own requirements apply here as
	  well (<application>gcc</application> version,
	  <application>gmake</application>, and others).
	</para>
      </listitem>

      <listitem>
	<para>
	  <application>unixODBC</application>.
	</para>
      </listitem>

      <listitem>
	<para>
	  <application>libgmp</application>.
	</para>
      </listitem>

      <listitem>
	<para>
	  <application>pkg-config</application>.
	</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>
	Linux distributions typically have separate runtime and
	development packages for these libraries. In all cases, the
	development packages must be installed to build &app;, and
	only the runtime packages are required to run the applications.
      </para>
    </note>
  </simplesect>

  <simplesect>
    <title>Configuring and building</title>

    <para>
      As mentioned above, the &app; should be built into a standalone,
      installable
      package. Use the following documentation as a guide to create an
      installation script or a package.
    </para>

    <para>
      Run the <filename>configure</filename> script, followed by
      <command>make</command>
      (or <command>gmake</command>), and
      <command>make install</command>.
      <filename>configure</filename> takes the usual options that specify
      non-default installation directories for various files
      (see <command>configure --help</command>).
      Additional options are:
    </para>

    <variablelist>
      <varlistentry>
	<term>--with-pkgconfigdir=<replaceable>dir</replaceable></term>

	<listitem>
	  <para>
	    Specifies where pkgconfig configuration file gets installed.
	    The <command>configure</command> script goes through the list of
	    some common directories, and checks if they exist.
	  </para>

	  <para>
	    This option may be needed to override the default even if
	    <command>configure</command> finds it, and does not complain, if
	    it ends up finding and installs its pkgconfig file into the wrong
	    directory.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para>
      Run <command>(g)make install DESTDIR=/tmp/libcxxsql-install</command>.
      This creates an installation image in the
      <filename>/tmp/libcxxsql-install</filename> directory, to use as a basis
      for creating an installable package.
      A plain <command>(g)make install</command> will do it
      <quote>for real</quote>, of course.
      However, using an installable package is strongly recommended.
    </para>
  </simplesect>

  <simplesect>
    <title>Developing applications with the &app;</title>

    <para>
      See <ulink url="../core.html">&libcxxname;'s autotools
	instructions</ulink>. The &app; uses the same build framework.
      In <filename>configure.ac</filename>:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
LIBCXX_INIT
LIBCXXSQL_INIT</programlisting>
      </informalexample>
    </blockquote>

    <para>
      &libcxx;'s <command>LIBCXX_INIT</command> gets supplemented by
      &app;'s <command>LIBCXXSQL_INIT</command>,
      Similarly the <filename>Makefile.am</filename> invokes both
      &libcxx;'s <command>@LIBCXX_AM@</command> and &app;'s
      <command>@LIBCXXSQL_AM@</command>:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
@LIBCXX_AM@
@LIBCXXSQL_AM@

bin_PROGRAMS=main
main_SOURCES=main.C
main_LDADD=-lcxxsql -lcxx</programlisting>
      </informalexample>
    </blockquote>
  </simplesect>

  <simplesect id="multiver">
    <title>Packaging different versions of the &app;</title>

    <para>
      It is possible to install multiple versions of the &app; to accomodate
      software that gets built with different versions of the &app;.
      See <ulink url="/INSTALL.html#multiver">&libcxx;'s documentation
	for more information</ulink>. The same process gets used for the
      &app; too.
    </para>

    <para>
      The &app; has no runtime tools or scripts, so &app;'s compatibility
      package's contents are the same as the regular package's. &app;'s
      installation directories are:
    </para>

    <variablelist>
      <varlistentry>
	<term><filename><replaceable>$libdir</replaceable>/libcxxsql-<replaceable>$version</replaceable></filename></term>
	<listitem>
	  <para>
	    This directory whose name includes the &app; and &libcxx;'s API/ABI
	    versions contains the runtime libraries.
	    Multiple concurrently-installed version of the &app;
	    get installed into different directories in
	    <filename><replaceable>$libdir</replaceable></filename>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><filename><replaceable>$includedir</replaceable>/libcxxsql-<replaceable>$version</replaceable></filename></term>
	<listitem>
	  <para>
	    This directory whose name includes the &app;'s and &libcxx;'s
	    API/ABI version contains the header files.
	    Multiple concurrently-installed version of the &app;
	    install their header files into different directories in
	    <filename><replaceable>$includedir</replaceable></filename>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><filename><replaceable>$datadir</replaceable>/libcxxsql-<replaceable>$version</replaceable></filename></term>
	<listitem>
	  <para>
	    This directory whose name includes the &app;'s and &libcxx;'s
	    API/ABI
	    version contains supporting scripts, macros, and other miscellaneous
	    supporting files.
	    Multiple concurrently-installed version of the &app;
	    install their miscellaneous files into different directories in
	    <filename><replaceable>$datadir</replaceable></filename>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>The <command>pkgconf/pkg-config</command> and <command>aclocal</command> autoconf macros</term>
	<listitem>
	  <para>
	    The &app; installs a package configuration files and an autoconf
	    macro files into the shared, global
	    <filename>pkgconfig</filename> and
	    <filename>aclocal</filename> directories. The names of these files
	    include the &app; version, making it possible to install
	    multiple versions of these files, corresponding to each installed
	    version of the &app;.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </simplesect>

  <simplesect id="retarget">
    <title>Re-targeting to a different version of &app;</title>

    <para>
      Re-targeting code that gets compiled with the &app; to use a
      different version of the &app;, if that's possible, follows the
      same general process
      <ulink url="/INSTALL.html#retarget">&libcxx;'s</ulink>, and
      sets the <envar>LIBCXXSQL_VERSION</envar> environment variable which
      gets checked by the <command>LIBCXXSQL_INIT</command> macro.
      This is the &app;'s API/ABI version number which is, generally, the
      &app; version without the minor release level. One way to obtain
      the API/ABI version number is that it gets
      included in the name of the <filename>lib</filename> subdirectory
      where &app;'s runtime libraries get installed.
    </para>

    <note>
      <para>
	The version label that gets included in the name of the
	<filename>lib</filename> subdirectory includes both the &app; and
	&libcxx;'s API/ABI versions. Only the &app;'s ABI version gets
	specified by <envar>LIBCXXSQL_VERSION</envar>. The &libcxx; version
	gets specified by <envar>LIBCXX_VERSION</envar>.
      </para>
    </note>
  </simplesect>
</section>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "preface" "section")
End:
-->
